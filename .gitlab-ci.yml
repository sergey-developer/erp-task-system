stages:
  - test
  - build
  - deploy
  - cleanup

Tests:
  stage: test
  image: node:18-alpine
  script:
    - export REACT_APP_API_URL=http://localhost:3000
    - export REACT_APP_ENVIRONMENT=test
    - export CI=true
    - yarn install
    - yarn test
  only:
    - rc
    - master
  tags:
    - docker


Build and Publish:
  stage: build
  before_script:
    - source "$(~/bin/trdl use werf 1.2 stable)"
    - type werf && source $(werf ci-env gitlab --as-file)
    - export WERF_SECRET_KEY=$WERF_SECRET_KEY
  script:
    - werf build
  except: [schedules]
  only:
    - rc
    - master
  tags:
    - werf

.base_deploy: &base_deploy
  stage: deploy
  needs: ["Build and Publish"]
  dependencies:
    - Build and Publish
  before_script:
    - source "$(~/bin/trdl use werf 1.2 stable)"
    - type werf && source $(werf ci-env gitlab --as-file)
    - export WERF_SECRET_KEY=$WERF_SECRET_KEY
  script:
    - werf converge --kube-context="$kube_context" --env=$env --values=.helm/$env-values.yaml --secret-values=.helm/$env-secret-values.yaml
  except: [schedules]
  tags: [werf]


Deploy to Develop:
  <<: *base_deploy
  variables:
    env: dev
    kube_context: default/dev
  only:
    - develop

Deploy to Staging:
  <<: *base_deploy
  variables:
    env: stage
    kube_context: default/dev
  only:
    - rc

Cleanup:
  stage: cleanup
  before_script:
    - source "$(~/bin/trdl use werf 1.2 stable)"
    - type werf && source $(werf ci-env gitlab --as-file)
    - export WERF_SECRET_KEY=$WERF_SECRET_KEY
  script:
    - werf cleanup --kube-context="default/dev"
  only: [schedules]
  tags:
    - werf